/* PascalParser.java */
/* Generated By:JavaCC: Do not edit this line. PascalParser.java */
package parser;
import java.util.ArrayList;
import parser.ast.*;
public class PascalParser implements PascalParserConstants {
    private SymbolTable symbolTable = new SymbolTable();
    private ErrorLog errorLog = new ErrorLog();
    private SemanticStack semanticStack = new SemanticStack();
    private SemanticAnalyzer semanticAnalyzer = new SemanticAnalyzer(symbolTable,semanticStack,errorLog);

    public void printErrors(){
        errorLog.printLog();
    }

  final public Program Program() throws ParseException {this.semanticStack.pushBlock(BlockType.PROGRAM_BLOCK);
    Token identifier = null;
    ConstBlock constBlock = null;
    VarBlock varBlock = null;
    CodeBlock codeBlock = null;
    jj_consume_token(PROGRAM_KEYWORD);
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        VarBlock();
      } else if (jj_2_2(3)) {
        ConstBlock();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(3)) {
        ;
      } else {
        break label_1;
      }
    }
    CodeBlock();
    jj_consume_token(PERIOD);
this.semanticStack.popBlock();
    {if ("" != null) return new Program(identifier.image, varBlock, constBlock, codeBlock);}
    throw new Error("Missing return statement in function");
}

//void UseStatement():
//{}
//{
//    //La gramatica comentada permite el uso de la clausula uses para importar librerias.
//<USES_KEYWORD> <IDENTIFIER> <SEMICOLON>
//}
  final public 
void Block() throws ParseException {
    if (jj_2_4(3)) {
      CodeBlock();
    } else if (jj_2_5(3)) {
      ConstBlock();
    } else if (jj_2_6(3)) {
      VarBlock();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public VarBlock VarBlock() throws ParseException {this.semanticStack.pushBlock(BlockType.VAR_BLOCK);
    ArrayList<VariableDeclaration> variables= null;
    jj_consume_token(VAR_KEYWORD);
    label_2:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_2;
      }
      variables = VariableDeclaration();
    }
this.semanticStack.popBlock();

        {if ("" != null) return new VarBlock(variables);}
    throw new Error("Missing return statement in function");
}

  final public ConstBlock ConstBlock() throws ParseException {semanticStack.pushBlock(BlockType.CONST_BLOCK);
    Token identifier=null,typeIdentifier=null,value=null;
     String constName = "";
     ArrayList<ConstDeclaration> constants = new ArrayList();
    jj_consume_token(CONST_KEYWORD);
    label_3:
    while (true) {
      if (jj_2_8(3)) {
        ;
      } else {
        break label_3;
      }
      identifier = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      typeIdentifier = TypeIdentifier();
      jj_consume_token(EQ_OP);
      value = Constant();
      jj_consume_token(SEMICOLON);
    }
SymbolEntry newConstant = new SymbolEntry(
                identifier.image,
                value,
                identifier.beginLine,
                SymbolType.CONSTANT,
                DataTypes.getDataType(typeIdentifier.image),
                1,
                0
        );
        semanticAnalyzer.checkConstantRedefinition(newConstant);
semanticStack.popBlock();
    {if ("" != null) return new ConstBlock(constants);}
    throw new Error("Missing return statement in function");
}

  final public void CodeBlock() throws ParseException {
    jj_consume_token(BEGIN_KEYWORD);
    label_4:
    while (true) {
      if (jj_2_9(3)) {
        ;
      } else {
        break label_4;
      }
      Statement();
    }
    jj_consume_token(END_KEYWORD);
}

  final public void Statement() throws ParseException {
    if (jj_2_10(3)) {
      AssignmentStatement();
    } else if (jj_2_11(3)) {
      ForStatement();
    } else if (jj_2_12(3)) {
      IfStatement();
    } else if (jj_2_13(3)) {
      ReadCall();
    } else if (jj_2_14(3)) {
      ReadlnCall();
    } else if (jj_2_15(3)) {
      WhileStatement();
    } else if (jj_2_16(3)) {
      WriteCall();
    } else if (jj_2_17(3)) {
      WritelnCall();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Token TypeIdentifier() throws ParseException {Token type=null;
    if (jj_2_18(3)) {
      type = jj_consume_token(INT_KEYWORD);
    } else if (jj_2_19(3)) {
      type = jj_consume_token(REAL_KEYWORD);
    } else if (jj_2_20(3)) {
      type = jj_consume_token(CHAR_KEYWORD);
    } else if (jj_2_21(3)) {
      type = jj_consume_token(BOOLEAN_KEYWORD);
    } else if (jj_2_22(3)) {
      type = jj_consume_token(STRING_KEYWORD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

//void SimpleType():
//{}
//{
//    <IDENTIFIER>| TypeIdentifier() | <LPAREN> <IDENTIFIER> (<COMMA> <IDENTIFIER> )* <RPAREN> | Constant() (<RANGE_OP> Constant())?
//}

//void FieldList():
//{}
//{
// ( (<IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type() <SEMICOLON>)+)?
//}

//void Type():
//{}
//{
//    <ARRAY_KEYWORD> <LBRACKET> SimpleType() <RBRACKET> <OF_KEYWORD> Type() | <RECORD_KEYWORD> FieldList() <END_KEYWORD> <SEMICOLON> | SimpleType()
//}

//void FunctionCall():
//{}
//{
//<IDENTIFIER> ( <LPAREN> Argument() ( <COMMA> Argument() )* <RPAREN>)?
//}

//void ProcedureCall():
//{}
//{
//<IDENTIFIER> ( <LPAREN> Argument() ( <COMMA> Argument() )* <RPAREN>)?
//}

//void Argument():
//{}
//{
//    Expression() | Constant()
//}
  final public 

void Expression() throws ParseException {
    SimpleExpression();
    if (jj_2_29(3)) {
      if (jj_2_23(3)) {
        jj_consume_token(EQ_OP);
      } else if (jj_2_24(3)) {
        jj_consume_token(LT_OP);
      } else if (jj_2_25(3)) {
        jj_consume_token(GT_OP);
      } else if (jj_2_26(3)) {
        jj_consume_token(NEQ_OP);
      } else if (jj_2_27(3)) {
        jj_consume_token(LE_OP);
      } else if (jj_2_28(3)) {
        jj_consume_token(GE_OP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleExpression();
    } else {
      ;
    }
}

  final public void SimpleExpression() throws ParseException {
    if (jj_2_32(3)) {
      if (jj_2_30(3)) {
        jj_consume_token(ADD_OP);
      } else if (jj_2_31(3)) {
        jj_consume_token(SUB_OP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    Term();
    label_5:
    while (true) {
      if (jj_2_33(3)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_34(3)) {
        jj_consume_token(OR_KEYWORD);
      } else if (jj_2_35(3)) {
        jj_consume_token(AND_KEYWORD);
      } else if (jj_2_36(3)) {
        jj_consume_token(NOT_KEYWORD);
      } else if (jj_2_37(3)) {
        jj_consume_token(ADD_OP);
      } else if (jj_2_38(3)) {
        jj_consume_token(SUB_OP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
    }
}

  final public void Term() throws ParseException {
    Factor();
    label_6:
    while (true) {
      if (jj_2_39(3)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_40(3)) {
        jj_consume_token(MUL_OP);
      } else if (jj_2_41(3)) {
        jj_consume_token(DIV_OP);
      } else if (jj_2_42(3)) {
        jj_consume_token(MOD_KEYWORD);
      } else if (jj_2_43(3)) {
        jj_consume_token(AND_KEYWORD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
    }
}

  final public void Factor() throws ParseException {
    if (jj_2_47(3)) {
      Constant();
    } else if (jj_2_48(3)) {
      Variable();
    } else if (jj_2_49(3)) {
      UnsignedConstant();
    } else if (jj_2_50(3)) {
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } else if (jj_2_51(3)) {
      jj_consume_token(NOT_KEYWORD);
      Factor();
    } else if (jj_2_52(3)) {
      jj_consume_token(LBRACKET);
      Expression();
      if (jj_2_44(3)) {
        jj_consume_token(RANGE_OP);
        Expression();
      } else {
        ;
      }
      label_7:
      while (true) {
        if (jj_2_45(3)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
        Expression();
        if (jj_2_46(3)) {
          jj_consume_token(RANGE_OP);
          Expression();
        } else {
          ;
        }
      }
      jj_consume_token(RBRACKET);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Token Constant() throws ParseException {Token sign=null;
    Token value=null;
    if (jj_2_58(3)) {
      if (jj_2_55(3)) {
        if (jj_2_53(3)) {
          sign = jj_consume_token(ADD_OP);
        } else if (jj_2_54(3)) {
          sign = jj_consume_token(SUB_OP);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      if (jj_2_56(3)) {
        jj_consume_token(IDENTIFIER);
      } else if (jj_2_57(3)) {
        UnsignedNumber();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_59(3)) {
      jj_consume_token(CHAR_CONSTANT);
    } else if (jj_2_60(3)) {
      jj_consume_token(STRING_CONSTANT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

  final public void UnsignedConstant() throws ParseException {
    if (jj_2_61(3)) {
      jj_consume_token(IDENTIFIER);
    } else if (jj_2_62(3)) {
      UnsignedNumber();
    } else if (jj_2_63(3)) {
      jj_consume_token(NIL_KEYWORD);
    } else if (jj_2_64(3)) {
      jj_consume_token(CHAR_CONSTANT);
    } else if (jj_2_65(3)) {
      jj_consume_token(STRING_CONSTANT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public Token UnsignedNumber() throws ParseException {Token literal;
    if (jj_2_66(3)) {
      literal = jj_consume_token(INTEGER_CONSTANT);
    } else if (jj_2_67(3)) {
      literal = jj_consume_token(REAL_CONSTANT);
{if ("" != null) return literal;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//void RecordReference():
//{}
//{
//    //Esta gramatica soporta la referencia hacia tipos registro.
//    <IDENTIFIER> <PERIOD> (<IDENTIFIER> | ArrayReference() )
//}
  final public 
void Variable() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_68(3)) {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
    } else {
      ;
    }
}

/*
Las acciones semanticas para la definicion de variables realiza
la comprobacion de la redeclaracion de identificadores.
 */
  final public ArrayList<VariableDeclaration> VariableDeclaration() throws ParseException {this.semanticStack.pushBlock(BlockType.VAR_BLOCK);
    Token name=null,typeIdentifier=null,arrayKeyword=null,arrayLen=null;

    String varValue = "";
    int varDefLine = name.beginLine;
    SymbolType varSymbolType = SymbolType.VARIABLE;
    DataType varDataType = DataTypes.getDataType(typeIdentifier.image);
    int varLen = 1;
    int varDimension = 0;

    SymbolEntry tmp = new SymbolEntry();
    ArrayList<String> names = new ArrayList();
     ArrayList<VariableDeclaration> variables = new ArrayList<>();
    name = jj_consume_token(IDENTIFIER);
names.add(name.image);
    if (jj_2_70(3)) {
      label_8:
      while (true) {
        if (jj_2_69(3)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        name = jj_consume_token(IDENTIFIER);
names.add(name.image);
      }
      jj_consume_token(COLON);
    } else if (jj_2_71(3)) {
      jj_consume_token(COLON);
      arrayKeyword = jj_consume_token(ARRAY_KEYWORD);
      jj_consume_token(LBRACKET);
      arrayLen = jj_consume_token(INTEGER_CONSTANT);
      jj_consume_token(RBRACKET);
      jj_consume_token(OF_KEYWORD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    typeIdentifier = TypeIdentifier();
    jj_consume_token(SEMICOLON);
if(arrayKeyword!=null){
        varSymbolType = SymbolType.ARRAY;
        varLen=Integer.parseInt(arrayLen.image);
        tmp = new SymbolEntry(name.image,varValue,varDefLine,varSymbolType,varDataType,varLen,varDimension);
        semanticAnalyzer.checkArrayRedefinition(tmp);
    }else{
        for(String id: names){
            tmp = new SymbolEntry(id,varValue,varDefLine,varSymbolType,varDataType,varLen,varDimension);
            semanticAnalyzer.checkVariableRedefinition(tmp);
        }
    }
this.semanticStack.popBlock();
    {if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
}

//void ParamDefinition():
//{}
//{
//<IDENTIFIER> (<COMMA> <IDENTIFIER> )* <COLON> Type()
//| <FUNCTION_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type() <SEMICOLON>
//| <VAR_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type()
//| <PROCEDURE_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)*
//}

//void ParamList() :
//{}
//{
//(<LPAREN> ParamDefinition() (<SEMICOLON> ParamDefinition() )* <RPAREN> )?
//}

//void Procedure() :
//{}
//{
// <PROCEDURE_KEYWORD> <IDENTIFIER> ParamList() <SEMICOLON> ( ConstBlock() | VarBlock() )* Block() <SEMICOLON>
//}

//void Function() :
//{}
//{
// <FUNCTION_KEYWORD> <IDENTIFIER> ParamList() <COLON> Type() <SEMICOLON> ( ConstBlock() | VarBlock() )* Block() <SEMICOLON>
//}
  final public 
void AssignmentStatement() throws ParseException {
    Variable();
    jj_consume_token(ASSIGN_OP);
    Expression();
    jj_consume_token(SEMICOLON);
}

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF_KEYWORD);
    Expression();
    jj_consume_token(THEN_KEYWORD);
    if (jj_2_72(3)) {
      Statement();
    } else if (jj_2_73(3)) {
      CodeBlock();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_74(3)) {
      ElseStatement();
    } else {
      ;
    }
}

  final public void ElseStatement() throws ParseException {
    jj_consume_token(ELSE_KEYWORD);
    if (jj_2_75(3)) {
      Statement();
    } else if (jj_2_76(3)) {
      CodeBlock();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void CaseStatement() throws ParseException {
    jj_consume_token(CASE_KEYWORD);
    Expression();
    jj_consume_token(OF_KEYWORD);
    label_9:
    while (true) {
      Constant();
      label_10:
      while (true) {
        if (jj_2_77(3)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        Constant();
      }
      jj_consume_token(COLON);
      if (jj_2_78(3)) {
        Statement();
      } else if (jj_2_79(3)) {
        CodeBlock();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_80(3)) {
        ;
      } else {
        break label_9;
      }
    }
    jj_consume_token(ELSE_KEYWORD);
    if (jj_2_81(3)) {
      Statement();
    } else if (jj_2_82(3)) {
      CodeBlock();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(END_KEYWORD);
    jj_consume_token(SEMICOLON);
}

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE_KEYWORD);
    Expression();
    jj_consume_token(DO_KEYWORD);
    if (jj_2_83(3)) {
      Statement();
    } else if (jj_2_84(3)) {
      CodeBlock();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//void RepeatStatement():
//{}
//{
//    <REPEAT_KEYWORD> (Statement())* <UNTIL_KEYWORD> Expression() <SEMICOLON>
//}
  final public 
void ForStatement() throws ParseException {
    jj_consume_token(FOR_KEYWORD);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN_OP);
    Expression();
    if (jj_2_85(3)) {
      jj_consume_token(DOWNTO_KEYWORD);
    } else if (jj_2_86(3)) {
      jj_consume_token(TO_KEYWORD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
    jj_consume_token(DO_KEYWORD);
    if (jj_2_87(3)) {
      Statement();
    } else if (jj_2_88(3)) {
      CodeBlock();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ReadlnCall() throws ParseException {
    jj_consume_token(READLN_KEYWORD);
    if (jj_2_91(3)) {
      jj_consume_token(LPAREN);
      if (jj_2_90(3)) {
        Expression();
        label_11:
        while (true) {
          if (jj_2_89(3)) {
            ;
          } else {
            break label_11;
          }
          jj_consume_token(COMMA);
          Expression();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
}

  final public void ReadCall() throws ParseException {
    jj_consume_token(READ_KEYWORD);
    if (jj_2_94(3)) {
      jj_consume_token(LPAREN);
      if (jj_2_93(3)) {
        Expression();
        label_12:
        while (true) {
          if (jj_2_92(3)) {
            ;
          } else {
            break label_12;
          }
          jj_consume_token(COMMA);
          Expression();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
}

  final public void WritelnCall() throws ParseException {Token lparen=null,semicolon=null,rparen=null;
    jj_consume_token(WRITELN_KEYWORD);
    try {
      if (jj_2_97(3)) {
        lparen = jj_consume_token(LPAREN);
        if (jj_2_96(3)) {
          Expression();
          label_13:
          while (true) {
            if (jj_2_95(3)) {
              ;
            } else {
              break label_13;
            }
            jj_consume_token(COMMA);
            Expression();
          }
        } else {
          ;
        }
        rparen = jj_consume_token(RPAREN);
      } else {
        ;
      }
      semicolon = jj_consume_token(SEMICOLON);
    } catch (ParseException paex) {
if(lparen==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \"(\" despues de writeln");
            }
            if(lparen==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \")\" despues de writeln(");
            }
            if(semicolon==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \";\" al final de writeln(...)");
            }
            {if (true) throw paex;}
    }
}

  final public void WriteCall() throws ParseException {Token t=null;
    jj_consume_token(WRITE_KEYWORD);
    if (jj_2_100(3)) {
      jj_consume_token(LPAREN);
      if (jj_2_99(3)) {
        Expression();
        label_14:
        while (true) {
          if (jj_2_98(3)) {
            ;
          } else {
            break label_14;
          }
          jj_consume_token(COMMA);
          Expression();
        }
      } else {
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
    try {
      t = jj_consume_token(SEMICOLON);
    } catch (ParseException paex) {
if(t==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \";\" al final de write(...)");
        }
        {if (true) throw paex;}
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_66()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_67()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_68()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_69()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_70()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_71()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_72()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_73()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_74()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_75()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_76()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_77()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_78()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_79()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_80()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_81()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_82()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_83()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_84()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_85()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_86()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_87()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_88()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_89()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_90()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_91()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_92()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_93()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_94()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_95()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_96()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_97()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_98()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_99()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_100()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_3_87()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_VarBlock_153_5_15()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_scan_token(STRING_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_VarBlock_153_5_15()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(ARRAY_KEYWORD)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(CHAR_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_ConstBlock_170_5_16()
 {
    if (jj_scan_token(CONST_KEYWORD)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(NOT_KEYWORD)) return true;
    if (jj_3R_Factor_281_5_31()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_VariableDeclaration_346_5_18()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(SUB_OP)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_ConstBlock_170_5_16()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_scan_token(CHAR_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(ADD_OP)) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaration_346_5_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) return true;
    }
    if (jj_3R_TypeIdentifier_212_5_19()) return true;
    return false;
  }

  private boolean jj_3R_VarBlock_153_5_15()
 {
    if (jj_scan_token(VAR_KEYWORD)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_UnsignedNumber_307_5_36()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_scan_token(REAL_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_scan_token(TO_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(NIL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(GE_OP)) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(NOT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(AND_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_Variable_322_5_34()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(LE_OP)) return true;
    return false;
  }

  private boolean jj_3_100()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_WritelnCall_472_9_28()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(AND_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_scan_token(DOWNTO_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_3R_ElseStatement_428_5_37()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_UnsignedNumber_307_5_36()) return true;
    return false;
  }

  private boolean jj_3_92()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(NEQ_OP)) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_89()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(SUB_OP)) return true;
    return false;
  }

  private boolean jj_3R_UnsignedNumber_307_5_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(MOD_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_UnsignedConstant_299_5_35()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_scan_token(INTEGER_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_WriteCall_494_5_27()) return true;
    return false;
  }

  private boolean jj_3R_WriteCall_494_5_27()
 {
    if (jj_scan_token(WRITE_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(STRING_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(GT_OP)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(OR_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_UnsignedConstant_299_5_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    }
    }
    if (jj_3R_Term_273_5_30()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Constant_290_5_33()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(DIV_OP)) return true;
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_Variable_322_5_34()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(ADD_OP)) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(LT_OP)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_Constant_290_5_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_WhileStatement_440_5_26()) return true;
    return false;
  }

  private boolean jj_3R_WritelnCall_472_9_28()
 {
    if (jj_scan_token(WRITELN_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_80()
 {
    if (jj_3R_Constant_290_5_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) return true;
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(MUL_OP)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    if (jj_3R_Factor_281_5_31()) return true;
    return false;
  }

  private boolean jj_3R_Factor_281_5_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(EQ_OP)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_Constant_290_5_33()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_SimpleExpression_266_5_29()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(SUB_OP)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(BOOLEAN_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_Term_273_5_30()
 {
    if (jj_3R_Factor_281_5_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ReadCall_464_5_24()
 {
    if (jj_scan_token(READ_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_ReadlnCall_458_5_25()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(RANGE_OP)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3R_ReadlnCall_458_5_25()
 {
    if (jj_scan_token(READLN_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(ADD_OP)) return true;
    return false;
  }

  private boolean jj_3R_SimpleExpression_266_5_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_3R_Term_273_5_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ForStatement_452_5_22()
 {
    if (jj_scan_token(FOR_KEYWORD)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN_OP)) return true;
    return false;
  }

  private boolean jj_3R_Expression_260_5_32()
 {
    if (jj_3R_SimpleExpression_266_5_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_ReadCall_464_5_24()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(CHAR_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3R_WhileStatement_440_5_26()
 {
    if (jj_scan_token(WHILE_KEYWORD)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    if (jj_scan_token(DO_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_IfStatement_422_5_23()) return true;
    return false;
  }

  private boolean jj_3R_ElseStatement_428_5_37()
 {
    if (jj_scan_token(ELSE_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(REAL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_422_5_23()
 {
    if (jj_scan_token(IF_KEYWORD)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    if (jj_scan_token(THEN_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_ForStatement_452_5_22()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentStatement_416_5_21()
 {
    if (jj_3R_Variable_322_5_34()) return true;
    if (jj_scan_token(ASSIGN_OP)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(RANGE_OP)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(INT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_TypeIdentifier_212_5_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_202_5_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_AssignmentStatement_416_5_21()) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_3R_CodeBlock_192_3_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_260_5_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_ConstBlock_170_5_16()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_Statement_202_5_20()) return true;
    return false;
  }

  private boolean jj_3R_CodeBlock_192_3_17()
 {
    if (jj_scan_token(BEGIN_KEYWORD)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(STRING_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_TypeIdentifier_212_5_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PascalParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[100];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PascalParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PascalParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PascalParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PascalParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PascalParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PascalParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PascalParser(PascalParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PascalParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[68];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 68; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 100; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			   case 64: jj_3_65(); break;
			   case 65: jj_3_66(); break;
			   case 66: jj_3_67(); break;
			   case 67: jj_3_68(); break;
			   case 68: jj_3_69(); break;
			   case 69: jj_3_70(); break;
			   case 70: jj_3_71(); break;
			   case 71: jj_3_72(); break;
			   case 72: jj_3_73(); break;
			   case 73: jj_3_74(); break;
			   case 74: jj_3_75(); break;
			   case 75: jj_3_76(); break;
			   case 76: jj_3_77(); break;
			   case 77: jj_3_78(); break;
			   case 78: jj_3_79(); break;
			   case 79: jj_3_80(); break;
			   case 80: jj_3_81(); break;
			   case 81: jj_3_82(); break;
			   case 82: jj_3_83(); break;
			   case 83: jj_3_84(); break;
			   case 84: jj_3_85(); break;
			   case 85: jj_3_86(); break;
			   case 86: jj_3_87(); break;
			   case 87: jj_3_88(); break;
			   case 88: jj_3_89(); break;
			   case 89: jj_3_90(); break;
			   case 90: jj_3_91(); break;
			   case 91: jj_3_92(); break;
			   case 92: jj_3_93(); break;
			   case 93: jj_3_94(); break;
			   case 94: jj_3_95(); break;
			   case 95: jj_3_96(); break;
			   case 96: jj_3_97(); break;
			   case 97: jj_3_98(); break;
			   case 98: jj_3_99(); break;
			   case 99: jj_3_100(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
