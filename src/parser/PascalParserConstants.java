/* Generated By:JavaCC: Do not edit this line. PascalParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PascalParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT1 = 5;
  /** RegularExpression Id. */
  int COMMENT2 = 6;
  /** RegularExpression Id. */
  int COMMENT3 = 7;
  /** RegularExpression Id. */
  int BEGIN_KEYWORD = 8;
  /** RegularExpression Id. */
  int END_KEYWORD = 9;
  /** RegularExpression Id. */
  int PROGRAM_KEYWORD = 10;
  /** RegularExpression Id. */
  int VAR_KEYWORD = 11;
  /** RegularExpression Id. */
  int CONST_KEYWORD = 12;
  /** RegularExpression Id. */
  int ARRAY_KEYWORD = 13;
  /** RegularExpression Id. */
  int OF_KEYWORD = 14;
  /** RegularExpression Id. */
  int IF_KEYWORD = 15;
  /** RegularExpression Id. */
  int THEN_KEYWORD = 16;
  /** RegularExpression Id. */
  int ELSE_KEYWORD = 17;
  /** RegularExpression Id. */
  int WHILE_KEYWORD = 18;
  /** RegularExpression Id. */
  int DO_KEYWORD = 19;
  /** RegularExpression Id. */
  int FOR_KEYWORD = 20;
  /** RegularExpression Id. */
  int TO_KEYWORD = 21;
  /** RegularExpression Id. */
  int DOWNTO_KEYWORD = 22;
  /** RegularExpression Id. */
  int REPEAT_KEYWORD = 23;
  /** RegularExpression Id. */
  int UNTIL_KEYWORD = 24;
  /** RegularExpression Id. */
  int CASE_KEYWORD = 25;
  /** RegularExpression Id. */
  int BREAK_KEYWORD = 26;
  /** RegularExpression Id. */
  int CONTINUE_KEYWORD = 27;
  /** RegularExpression Id. */
  int OR_KEYWORD = 28;
  /** RegularExpression Id. */
  int AND_KEYWORD = 29;
  /** RegularExpression Id. */
  int NOT_KEYWORD = 30;
  /** RegularExpression Id. */
  int MOD_KEYWORD = 31;
  /** RegularExpression Id. */
  int DIV_KEYWORD = 32;
  /** RegularExpression Id. */
  int INT_KEYWORD = 33;
  /** RegularExpression Id. */
  int REAL_KEYWORD = 34;
  /** RegularExpression Id. */
  int BOOLEAN_KEYWORD = 35;
  /** RegularExpression Id. */
  int CHAR_KEYWORD = 36;
  /** RegularExpression Id. */
  int STRING_KEYWORD = 37;
  /** RegularExpression Id. */
  int NIL_KEYWORD = 38;
  /** RegularExpression Id. */
  int WRITELN_KEYWORD = 39;
  /** RegularExpression Id. */
  int WRITE_KEYWORD = 40;
  /** RegularExpression Id. */
  int READ_KEYWORD = 41;
  /** RegularExpression Id. */
  int READLN_KEYWORD = 42;
  /** RegularExpression Id. */
  int IDENTIFIER = 43;
  /** RegularExpression Id. */
  int INTEGER_CONSTANT = 44;
  /** RegularExpression Id. */
  int REAL_CONSTANT = 45;
  /** RegularExpression Id. */
  int STRING_CONSTANT = 46;
  /** RegularExpression Id. */
  int CHAR_CONSTANT = 47;
  /** RegularExpression Id. */
  int ADD_OP = 48;
  /** RegularExpression Id. */
  int SUB_OP = 49;
  /** RegularExpression Id. */
  int MUL_OP = 50;
  /** RegularExpression Id. */
  int DIV_OP = 51;
  /** RegularExpression Id. */
  int ASSIGN_OP = 52;
  /** RegularExpression Id. */
  int EQ_OP = 53;
  /** RegularExpression Id. */
  int NEQ_OP = 54;
  /** RegularExpression Id. */
  int LT_OP = 55;
  /** RegularExpression Id. */
  int GT_OP = 56;
  /** RegularExpression Id. */
  int LE_OP = 57;
  /** RegularExpression Id. */
  int GE_OP = 58;
  /** RegularExpression Id. */
  int LPAREN = 59;
  /** RegularExpression Id. */
  int RPAREN = 60;
  /** RegularExpression Id. */
  int LBRACKET = 61;
  /** RegularExpression Id. */
  int RBRACKET = 62;
  /** RegularExpression Id. */
  int SEMICOLON = 63;
  /** RegularExpression Id. */
  int COLON = 64;
  /** RegularExpression Id. */
  int COMMA = 65;
  /** RegularExpression Id. */
  int PERIOD = 66;
  /** RegularExpression Id. */
  int RANGE_OP = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COMMENT1>",
    "<COMMENT2>",
    "<COMMENT3>",
    "\"begin\"",
    "\"end\"",
    "\"program\"",
    "\"var\"",
    "\"const\"",
    "\"array\"",
    "\"of\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"to\"",
    "\"downto\"",
    "\"repeat\"",
    "\"until\"",
    "\"case\"",
    "\"break\"",
    "\"continue\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"mod\"",
    "\"div\"",
    "\"integer\"",
    "\"real\"",
    "\"boolean\"",
    "\"char\"",
    "\"string\"",
    "\"nil\"",
    "\"writeln\"",
    "\"write\"",
    "\"read\"",
    "\"readln\"",
    "<IDENTIFIER>",
    "<INTEGER_CONSTANT>",
    "<REAL_CONSTANT>",
    "<STRING_CONSTANT>",
    "<CHAR_CONSTANT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\":=\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"..\"",
  };

}
