options {
    STATIC = false;
    IGNORE_CASE = true;
    BUILD_PARSER = true;
    LOOKAHEAD = 3;
    FORCE_LA_CHECK = true;
}

PARSER_BEGIN(PascalParser)
package parser;
import java.util.ArrayList;
import parser.ast.*;
public class PascalParser {
    private SymbolTable symbolTable = new SymbolTable();
    private ErrorLog errorLog = new ErrorLog();
    private SemanticStack semanticStack = new SemanticStack();
    private SemanticAnalyzer semanticAnalyzer = new SemanticAnalyzer(symbolTable,semanticStack,errorLog);

    public void printErrors(){
        errorLog.printLog();
    }
}
PARSER_END(PascalParser)

SKIP : {
    " " // Espacios en blanco
  | "\t" // Tabuladores
  | "\n" // Saltos de línea
  | "\r" // Retornos de carro
  | <COMMENT1: "{" (~["}"])* "}">
  | <COMMENT2: "(*" (~["*"])* "*)">
  | <COMMENT3: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN : {
    //Palabras reservadas
       < BEGIN_KEYWORD : "begin" >
      | < END_KEYWORD : "end" >
      | < PROGRAM_KEYWORD : "program" >
      | < VAR_KEYWORD : "var" >
      | < CONST_KEYWORD : "const" >
      //| < LABEL_KEYWORD : "label" >
      //| < FUNCTION_KEYWORD : "function" >
      //| < PROCEDURE_KEYWORD : "procedure" >
      | < ARRAY_KEYWORD : "array" >
      //| < SET_KEYWORD: "set" >
      | < OF_KEYWORD : "of" >
      | < IF_KEYWORD : "if" >
      | < THEN_KEYWORD : "then" >
      | < ELSE_KEYWORD : "else" >
      | < WHILE_KEYWORD : "while" >
      | < DO_KEYWORD : "do" >
      | < FOR_KEYWORD : "for" >
      | < TO_KEYWORD : "to" >
      | < DOWNTO_KEYWORD : "downto" >
      | < REPEAT_KEYWORD : "repeat" >
      | < UNTIL_KEYWORD : "until" >
      | < CASE_KEYWORD : "case" >
      //| < RECORD_KEYWORD : "record" >
      //| < TYPE_KEYWORD : "type" >
      //| < WITH_KEYWORD : "with" >
      //| < GOTO_KEYWORD : "goto" >
      | < BREAK_KEYWORD : "break" >
      | < CONTINUE_KEYWORD : "continue" >
//      | < EXIT_KEYWORD : "exit" >
      | < OR_KEYWORD : "or" >
      | < AND_KEYWORD : "and" >
      | < NOT_KEYWORD : "not" >
      | < MOD_KEYWORD : "mod" >
      | < DIV_KEYWORD : "div" >
      | <INT_KEYWORD : "integer">
      | <REAL_KEYWORD : "real" >
      | <BOOLEAN_KEYWORD : "boolean" >
      | <CHAR_KEYWORD : "char" >
      | <STRING_KEYWORD  : "string">
      | <NIL_KEYWORD : "nil" >
      //La palabra reservada packed sirve para optimizar el uso de memoria en arreglos y registros eliminando bytes de relleno
      //| <PACKED_KEYWORD: "packed">
      //| <IN_KEYWORD : "in">
      //| <USES_KEYWORD: "uses">
      | <WRITELN_KEYWORD : "writeln">
      | <WRITE_KEYWORD : "write">
      | <READ_KEYWORD : "read">
      | <READLN_KEYWORD : "readln">


  |  < IDENTIFIER : (["a"-"z","A"-"Z"])+ (["a"-"z","A"-"Z","0"-"9"])* >
  | < INTEGER_CONSTANT : (["0"-"9"])+ >
  | < REAL_CONSTANT : (["0"-"9"])+ ("E" ("+" | "-") (["0"-"9"])+  |"." (["0"-"9"])+ | "." (["0"-"9"])+ "E" ("+"|"-") (["0"-"9"])+)>
  | < STRING_CONSTANT : "\'" (~["\'","\n","\r"])* "\'" >
  | <CHAR_CONSTANT : "\'" (~[]) "\'" >
  | < ADD_OP : "+" >
  | < SUB_OP : "-" >
  | < MUL_OP : "*" >
  | < DIV_OP : "/" >
  | < ASSIGN_OP : ":=" >
  | < EQ_OP : "=" >
  | < NEQ_OP : "<>" >
  | < LT_OP : "<" >
  | < GT_OP : ">" >
  | < LE_OP : "<=" >
  | < GE_OP : ">=" >
  | < LPAREN : "(" >
  | < RPAREN : ")" >
  | < LBRACKET : "[">
  | < RBRACKET : "]">
  | < SEMICOLON : ";" >
  | < COLON : ":" >
  | < COMMA : "," >
  | < PERIOD : "." >
  | < RANGE_OP : ".." >
}

Program Program() :
{
    this.semanticStack.pushBlock(BlockType.PROGRAM_BLOCK);
    Token identifier = null;
    ConstBlock constBlock = null;
    VarBlock varBlock = null;
    CodeBlock codeBlock = null;
}
{
  //La gramática comentada acepta la palabra reservada "uses" para importar librerías.
  //<PROGRAM_KEYWORD> <IDENTIFIER> (<LPAREN> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <RPAREN> )?  <SEMICOLON> (UseStatement())* (Block())+ <PERIOD>
  <PROGRAM_KEYWORD> identifier=<IDENTIFIER>  <SEMICOLON> (VarBlock() | ConstBlock())+ CodeBlock() <PERIOD>

  {this.semanticStack.popBlock();
    return new Program(identifier.image, varBlock, constBlock, codeBlock);
}
}

//void UseStatement():
//{}
//{
//    //La gramatica comentada permite el uso de la clausula uses para importar librerias.
//<USES_KEYWORD> <IDENTIFIER> <SEMICOLON>
//}

void Block():
{}
{
    //La gramatica comentada soporta la creacion de procedimientos y funciones
    //CodeBlock() | ConstBlock()  | VarBlock() | Procedure() | Function()
    CodeBlock() | ConstBlock()  | VarBlock()
}

VarBlock VarBlock() :
{
    this.semanticStack.pushBlock(BlockType.VAR_BLOCK);
    ArrayList<VariableDeclaration> variables= null;
}
{
    <VAR_KEYWORD> (variables=VariableDeclaration())*

    {
        this.semanticStack.popBlock();

        return new VarBlock(variables);
    }
}

ConstBlock ConstBlock() :
{
     semanticStack.pushBlock(BlockType.CONST_BLOCK);
    Token identifier=null,typeIdentifier=null,value=null;
     String constName = "";
     ArrayList<ConstDeclaration> constants = new ArrayList();
}
{
    <CONST_KEYWORD> ( identifier=<IDENTIFIER> <COLON> typeIdentifier=TypeIdentifier() <EQ_OP> value=Constant() <SEMICOLON> )*//Hay que ver como obtener el valor de la constante
    {
        SymbolEntry newConstant = new SymbolEntry(
                identifier.image,
                value,
                identifier.beginLine,
                SymbolType.CONSTANT,
                DataTypes.getDataType(typeIdentifier.image),
                1,
                0
        );
        semanticAnalyzer.checkConstantRedefinition(newConstant);
    }
    {
    semanticStack.popBlock();
    return new ConstBlock(constants);
}
}

void CodeBlock() :
{}
{
  <BEGIN_KEYWORD>
  (Statement())*
  <END_KEYWORD>
}

void Statement() :
{}
{
    //La gramática comentada acepta la llamada a procedimientos y funciones
    //AssignmentStatement() | ProcedureCall() <SEMICOLON> | FunctionCall() <SEMICOLON> | IfStatement() | CaseStatement() | RepeatStatement() | WhileStatement() | ForStatement()
    AssignmentStatement() | ForStatement() | IfStatement() | ReadCall() | ReadlnCall() | WhileStatement() | WriteCall() | WritelnCall()
}

Token TypeIdentifier():
{
    Token type=null;
 }
{
    //La gramatica comentada soporta el uso de tipos definidos por el usuario
    //(<INT_KEYWORD> | <REAL_KEYWORD> | <CHAR_KEYWORD> | <BOOLEAN_KEYWORD> | <IDENTIFIER>) (<LBRACKET> UnsignedNumber() (<COMMA> UnsignedNumber())* <RBRACKET>)?
    (type=<INT_KEYWORD> | type=<REAL_KEYWORD> | type=<CHAR_KEYWORD> | type=<BOOLEAN_KEYWORD> | type=<STRING_KEYWORD>)


    {return type;}
}

//void SimpleType():
//{}
//{
//    <IDENTIFIER>| TypeIdentifier() | <LPAREN> <IDENTIFIER> (<COMMA> <IDENTIFIER> )* <RPAREN> | Constant() (<RANGE_OP> Constant())?
//}

//void FieldList():
//{}
//{
// ( (<IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type() <SEMICOLON>)+)?
//}

//void Type():
//{}
//{
//    <ARRAY_KEYWORD> <LBRACKET> SimpleType() <RBRACKET> <OF_KEYWORD> Type() | <RECORD_KEYWORD> FieldList() <END_KEYWORD> <SEMICOLON> | SimpleType()
//}

//void FunctionCall():
//{}
//{
//<IDENTIFIER> ( <LPAREN> Argument() ( <COMMA> Argument() )* <RPAREN>)?
//}

//void ProcedureCall():
//{}
//{
//<IDENTIFIER> ( <LPAREN> Argument() ( <COMMA> Argument() )* <RPAREN>)?
//}

//void Argument():
//{}
//{
//    Expression() | Constant()
//}


void Expression():
{}
{
    //La gramatica comentada soporta el uso de la palabra reservada IN para trabajar con conjuntos.
    //SimpleExpression() ((<EQ_OP> | <LT_OP> | <GT_OP> | <NEQ_OP> | <LE_OP> | <GE_OP> | <IN_KEYWORD>) SimpleExpression() )?
    SimpleExpression() ((<EQ_OP> | <LT_OP> | <GT_OP> | <NEQ_OP> | <LE_OP> | <GE_OP>) SimpleExpression() )?
}

void SimpleExpression():
{}
{
    (<ADD_OP> | <SUB_OP>)? Term() ( ( <OR_KEYWORD> | <AND_KEYWORD> | <NOT_KEYWORD> | <ADD_OP> | <SUB_OP> ) Term())*
}


void Term():
{}
{
    Factor()  ((<MUL_OP> | <DIV_OP> | <MOD_KEYWORD> | <AND_KEYWORD>) Factor() )*
}

void Factor():
{}
{
    //La gramatica comentada acepta las llamadas a funciones como un factor para una expresion
    //FunctionCall() | <IDENTIFIER>  | Constant() | Variable() | UnsignedConstant() | <LPAREN> Expression() <RPAREN> | <NOT_KEYWORD> Factor() | <LBRACKET> Expression() (<RANGE_OP> Expression())? (<COMMA> Expression() (<RANGE_OP> Expression())?)* <RBRACKET>
    Constant() | Variable() | UnsignedConstant() | <LPAREN> Expression() <RPAREN> | <NOT_KEYWORD> Factor() | <LBRACKET> Expression() (<RANGE_OP> Expression())? (<COMMA> Expression() (<RANGE_OP> Expression())?)* <RBRACKET>
}

Token Constant():
{
    Token sign=null;
    Token value=null;
 }
{
    (((sign=<ADD_OP> | sign=<SUB_OP>)? (<IDENTIFIER> | UnsignedNumber())) | <CHAR_CONSTANT> | <STRING_CONSTANT>)

    {return value;}
}


void UnsignedConstant():
{}
{
    <IDENTIFIER> | UnsignedNumber() | <NIL_KEYWORD> | <CHAR_CONSTANT> | <STRING_CONSTANT>
}

Token UnsignedNumber():
{
        Token literal;
}
{
    literal=<INTEGER_CONSTANT> | literal=<REAL_CONSTANT>

    {return literal;}
}

//void RecordReference():
//{}
//{
//    //Esta gramatica soporta la referencia hacia tipos registro.
//    <IDENTIFIER> <PERIOD> (<IDENTIFIER> | ArrayReference() )
//}

void Variable():
{}
{
    <IDENTIFIER> (<LBRACKET> Expression() <RBRACKET>)?
}

/*
Las acciones semanticas para la definicion de variables realiza
la comprobacion de la redeclaracion de identificadores.
 */
ArrayList<VariableDeclaration> VariableDeclaration():
{
    this.semanticStack.pushBlock(BlockType.VAR_BLOCK);
    Token name=null,typeIdentifier=null,arrayKeyword=null,arrayLen=null;

    String varValue = "";
    int varDefLine = name.beginLine;
    SymbolType varSymbolType = SymbolType.VARIABLE;
    DataType varDataType = DataTypes.getDataType(typeIdentifier.image);
    int varLen = 1;
    int varDimension = 0;

    SymbolEntry tmp = new SymbolEntry();
    ArrayList<String> names = new ArrayList();
     ArrayList<VariableDeclaration> variables = new ArrayList<>();
 }
{
    name=<IDENTIFIER>
{
    names.add(name.image);
}
((<COMMA> name=<IDENTIFIER>
{
    names.add(name.image);
} )* <COLON>| <COLON> arrayKeyword=<ARRAY_KEYWORD> <LBRACKET> arrayLen=<INTEGER_CONSTANT> <RBRACKET> <OF_KEYWORD> )  typeIdentifier=TypeIdentifier() <SEMICOLON>
{
    if(arrayKeyword!=null){
        varSymbolType = SymbolType.ARRAY;
        varLen=Integer.parseInt(arrayLen.image);
        tmp = new SymbolEntry(name.image,varValue,varDefLine,varSymbolType,varDataType,varLen,varDimension);
        semanticAnalyzer.checkArrayRedefinition(tmp);
    }else{
        for(String id: names){
            tmp = new SymbolEntry(id,varValue,varDefLine,varSymbolType,varDataType,varLen,varDimension);
            semanticAnalyzer.checkVariableRedefinition(tmp);
        }
    }
}
//{
//    for(String s:ids){
//        String identifierName = newVariable.image;
//        if(symbolTable.lookSymbol(identifierName)){
//            errorLog.logSemanticError(newVariable.beginLine,"Redeclaracion de la variable "+identifierName);
//        }else{
//            dimension = arrayKeyword != null ? 1:0;
//            len = arraySize!=null ? Integer.parseInt(arraySize.image):0;
//            symbolTable.addSymbol(new SymbolEntry(s,"",typeIdentifier.image, DataTypes.getSize(typeIdentifier.image,len),dimension));
//        }
//    }
//}

{
    this.semanticStack.popBlock();
    return variables;
}
}

//void ParamDefinition():
//{}
//{
//<IDENTIFIER> (<COMMA> <IDENTIFIER> )* <COLON> Type()
//| <FUNCTION_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type() <SEMICOLON>
//| <VAR_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)* <COLON> Type()
//| <PROCEDURE_KEYWORD> <IDENTIFIER> (<COMMA> <IDENTIFIER>)*
//}

//void ParamList() :
//{}
//{
//(<LPAREN> ParamDefinition() (<SEMICOLON> ParamDefinition() )* <RPAREN> )?
//}

//void Procedure() :
//{}
//{
// <PROCEDURE_KEYWORD> <IDENTIFIER> ParamList() <SEMICOLON> ( ConstBlock() | VarBlock() )* Block() <SEMICOLON>
//}

//void Function() :
//{}
//{
// <FUNCTION_KEYWORD> <IDENTIFIER> ParamList() <COLON> Type() <SEMICOLON> ( ConstBlock() | VarBlock() )* Block() <SEMICOLON>
//}

void AssignmentStatement():
{}
{
    Variable() <ASSIGN_OP> Expression() <SEMICOLON>
}

void IfStatement():
{}
{
    <IF_KEYWORD> Expression() <THEN_KEYWORD> (Statement() | CodeBlock() <SEMICOLON>)  (ElseStatement())?
}

void ElseStatement():
{}
{
    <ELSE_KEYWORD> (Statement() | CodeBlock() <SEMICOLON> )
}

void CaseStatement():
{}
{
    <CASE_KEYWORD> Expression() <OF_KEYWORD> (Constant() (<COMMA> Constant() )* <COLON> (Statement() | CodeBlock() <SEMICOLON> ))+ <ELSE_KEYWORD> (Statement() | CodeBlock() <SEMICOLON> )<END_KEYWORD> <SEMICOLON>
}

void WhileStatement():
{}
{
    <WHILE_KEYWORD> Expression() <DO_KEYWORD> (Statement() | CodeBlock() <SEMICOLON> )
}

//void RepeatStatement():
//{}
//{
//    <REPEAT_KEYWORD> (Statement())* <UNTIL_KEYWORD> Expression() <SEMICOLON>
//}

void ForStatement():
{}
{
    <FOR_KEYWORD> <IDENTIFIER> <ASSIGN_OP> Expression() (<DOWNTO_KEYWORD> | <TO_KEYWORD> ) Expression() <DO_KEYWORD> (Statement() | CodeBlock() <SEMICOLON> )
}

void ReadlnCall():
{}
{
    <READLN_KEYWORD> (<LPAREN> (Expression() (<COMMA> Expression() )* )? <RPAREN>)? <SEMICOLON>
}

void ReadCall():
{}
{
    <READ_KEYWORD> (<LPAREN> (Expression() (<COMMA> Expression() )* )? <RPAREN>)? <SEMICOLON>
}

void WritelnCall():
{
    Token lparen=null,semicolon=null,rparen=null;
}
{
        <WRITELN_KEYWORD>
        try{
            (lparen=<LPAREN> (Expression() (<COMMA> Expression() )* )? rparen=<RPAREN>)? semicolon=<SEMICOLON>
        }catch(ParseException paex){
            if(lparen==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \"(\" despues de writeln");
            }
            if(lparen==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \")\" despues de writeln(");
            }
            if(semicolon==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \";\" al final de writeln(...)");
            }
            throw paex;
        }
}

void WriteCall():
{
    Token t=null;
}
{
    <WRITE_KEYWORD> (<LPAREN> (Expression() (<COMMA> Expression() )* )? <RPAREN>)?
    try
    {
        t=<SEMICOLON>

    }catch(ParseException paex){
        if(t==null){
                errorLog.logSyntaxError(paex.currentToken.endLine,"Se esperaba un \";\" al final de write(...)");
        }
        throw paex;
    }
}
